/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package kboxstatusreport;

import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.embed.swing.JFXPanel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author Glenn Dimaliwat
 */
public class KBOXJFrame extends javax.swing.JFrame {

    private static DefaultTableModel tableModel;
    private DefaultTableModel model;
    private static final String hostname = "172.18.200.154";
    private static final String port = "3306";        
    private String selectedTicketNumber = "";
    private String selectedTicketNumberModifiedDate = "";
    private String searchKey = "";
    private boolean repeatSearch = false;
    private String sortOrder = "0 ASC";
    private String ticketFilePath = "";
    //Initialize 2D Array List
    List<List<String>> data = new ArrayList<>();
    SimpleDateFormat sdfYear = new SimpleDateFormat("yyyy");
    SimpleDateFormat sdfMonth = new SimpleDateFormat("MMMM");
    SimpleDateFormat sdfMM = new SimpleDateFormat("MM");
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    
    /**
     * Creates new form KBOXJFrame
     */
    public KBOXJFrame() {
        initComponents();
        initCustomComponents();
        initTicketsFile();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("KBOX Status Report");
        setIconImage(getIconImage());
        setPreferredSize(new java.awt.Dimension(1175, 429));

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setLabel("Refresh");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Path to Tickets File:");

        jButton2.setText("Edit File");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jToggleButton1.setText("Cell mode");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Go to Ticket URL");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Save Path");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Go to Sharepoint Documents");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)
                    .addComponent(jToggleButton1)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu2.setMnemonic('F');
        jMenu2.setText("File");

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        jMenuItem6.setMnemonic('r');
        jMenuItem6.setLabel("Refresh");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem7.setMnemonic('C');
        jMenuItem7.setText("Cell mode");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuItem1.setMnemonic('x');
        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        jMenu1.setMnemonic('S');
        jMenu1.setText("Search");

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setMnemonic('F');
        jMenuItem4.setText("Find");
        jMenuItem4.setToolTipText("");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        jMenuItem5.setText("Find Next");
        jMenuItem5.setToolTipText("N");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuBar1.add(jMenu1);

        jMenu3.setMnemonic('H');
        jMenu3.setText("Help");
        jMenu3.setToolTipText("");

        jMenuItem3.setMnemonic('U');
        jMenuItem3.setText("How to use this App");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuItem2.setMnemonic('b');
        jMenuItem2.setText("About");
        jMenuItem2.setToolTipText("");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1277, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initCustomComponents() {
        JFXPanel fxPanel = new JFXPanel(); // Needed to initialize JavaFX Objects
        
        tableModel = new DefaultTableModel(new Object[] { "OWNER", "ACTION", "CREATED", "TARGET DATE", "CATEGORY", "REQUESTOR", "TICKET", "DESCRIPTION", "STATUS", "REASON FOR PENDING", "MODIFIED" }, 0);
        jTable1.setModel(tableModel);  
        jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.getTableHeader().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
              
              jTable1.getColumnModel().getColumn(0).setHeaderValue("OWNER");
              jTable1.getColumnModel().getColumn(1).setHeaderValue("ACTION");
              jTable1.getColumnModel().getColumn(2).setHeaderValue("CREATED");
              jTable1.getColumnModel().getColumn(3).setHeaderValue("TARGET DATE");
              jTable1.getColumnModel().getColumn(4).setHeaderValue("CATEGORY");
              jTable1.getColumnModel().getColumn(5).setHeaderValue("REQUESTOR");
              jTable1.getColumnModel().getColumn(6).setHeaderValue("TICKET");
              jTable1.getColumnModel().getColumn(7).setHeaderValue("DESCRIPTION");
              jTable1.getColumnModel().getColumn(8).setHeaderValue("STATUS");
              jTable1.getColumnModel().getColumn(9).setHeaderValue("REASON FOR PENDING");
              jTable1.getColumnModel().getColumn(10).setHeaderValue("MODIFIED");
              
              int col = jTable1.columnAtPoint(new Point(e.getX(), e.getY()));
              if(jTable1.getRowCount()>0) {
                switch(col) {
                    case 0:
                        if(sortOrder.equalsIgnoreCase("0 ASC")) {
                            Collections.sort(data, new ArrayList2DComparator(0,"DESC"));
                            sortOrder = "0 DESC";
                            jTable1.getColumnModel().getColumn(col).setHeaderValue("▼ OWNER");
                        }
                        else {
                            Collections.sort(data, new ArrayList2DComparator(0,"ASC"));
                            sortOrder = "0 ASC";
                            jTable1.getColumnModel().getColumn(col).setHeaderValue("▲ OWNER");
                        }
                        break;
                    case 1:
                        if(sortOrder.equalsIgnoreCase("1 ASC")) {
                            Collections.sort(data, new ArrayList2DComparator(1,"DESC"));
                            sortOrder = "1 DESC";
                            jTable1.getColumnModel().getColumn(col).setHeaderValue("▼ ACTION");
                        }
                        else {
                            Collections.sort(data, new ArrayList2DComparator(1,"ASC"));
                            sortOrder = "1 ASC";
                            jTable1.getColumnModel().getColumn(col).setHeaderValue("▲ ACTION");
                        }
                        break;
                    case 2:
                        if(sortOrder.equalsIgnoreCase("2 ASC")) {
                            Collections.sort(data, new ArrayList2DComparator(2,"DESC"));
                            sortOrder = "2 DESC";
                            jTable1.getColumnModel().getColumn(col).setHeaderValue("▼ CREATED");
                        }
                        else {
                            Collections.sort(data, new ArrayList2DComparator(2,"ASC"));
                            sortOrder = "2 ASC";
                            jTable1.getColumnModel().getColumn(col).setHeaderValue("▲ CREATED");
                        }
                        break;
                    case 3: 
                        if(sortOrder.equalsIgnoreCase("3 ASC")) {
                            Collections.sort(data, new ArrayList2DComparator(3,"DESC"));
                            sortOrder = "3 DESC";
                            jTable1.getColumnModel().getColumn(col).setHeaderValue("▼ TARGET DATE");
                        }
                        else {
                            Collections.sort(data, new ArrayList2DComparator(3,"ASC"));
                            sortOrder = "3 ASC";
                            jTable1.getColumnModel().getColumn(col).setHeaderValue("▲ TARGET DATE");
                        }
                        break;
                    case 4: 
                        if(sortOrder.equalsIgnoreCase("4 ASC")) {
                            Collections.sort(data, new ArrayList2DComparator(4,"DESC"));
                            sortOrder = "4 DESC";
                            jTable1.getColumnModel().getColumn(col).setHeaderValue("▼ CATEGORY");
                        }
                        else {
                            Collections.sort(data, new ArrayList2DComparator(4,"ASC"));
                            sortOrder = "4 ASC";
                            jTable1.getColumnModel().getColumn(col).setHeaderValue("▲ CATEGORY");
                        }
                        break;
                    case 5: 
                        if(sortOrder.equalsIgnoreCase("5 ASC")) {
                            Collections.sort(data, new ArrayList2DComparator(5,"DESC"));
                            sortOrder = "5 DESC";
                            jTable1.getColumnModel().getColumn(col).setHeaderValue("▼ REQUESTOR");
                        }
                        else {
                            Collections.sort(data, new ArrayList2DComparator(5,"ASC"));
                            sortOrder = "5 ASC";
                            jTable1.getColumnModel().getColumn(col).setHeaderValue("▲ REQUESTOR");
                        }
                        break;
                    case 6: 
                        if(sortOrder.equalsIgnoreCase("6 ASC")) {
                            Collections.sort(data, new ArrayList2DComparator(6,"DESC"));
                            sortOrder = "6 DESC";
                            jTable1.getColumnModel().getColumn(col).setHeaderValue("▼ TICKET");
                        }
                        else {
                            Collections.sort(data, new ArrayList2DComparator(6,"ASC"));
                            sortOrder = "6 ASC";
                            jTable1.getColumnModel().getColumn(col).setHeaderValue("▲ TICKET");
                        }
                        break;
                    case 7: 
                        if(sortOrder.equalsIgnoreCase("7 ASC")) {
                            Collections.sort(data, new ArrayList2DComparator(7,"DESC"));
                            sortOrder = "7 DESC";
                            jTable1.getColumnModel().getColumn(col).setHeaderValue("▼ DESCRIPTION");
                        }
                        else {
                            Collections.sort(data, new ArrayList2DComparator(7,"ASC"));
                            sortOrder = "7 ASC";
                            jTable1.getColumnModel().getColumn(col).setHeaderValue("▲ DESCRIPTION");
                        }
                        break;
                    case 8: 
                        if(sortOrder.equalsIgnoreCase("8 ASC")) {
                            Collections.sort(data, new ArrayList2DComparator(8,"DESC"));
                            sortOrder = "8 DESC";
                            jTable1.getColumnModel().getColumn(col).setHeaderValue("▼ STATUS");
                        }
                        else {
                            Collections.sort(data, new ArrayList2DComparator(8,"ASC"));
                            sortOrder = "8 ASC";
                            jTable1.getColumnModel().getColumn(col).setHeaderValue("▲ STATUS");
                        }
                        break;
                    case 9: 
                        if(sortOrder.equalsIgnoreCase("9 ASC")) {
                            Collections.sort(data, new ArrayList2DComparator(9,"DESC"));
                            sortOrder = "9 DESC";
                            jTable1.getColumnModel().getColumn(col).setHeaderValue("▼ REASON FOR PENDING");
                        }
                        else {
                            Collections.sort(data, new ArrayList2DComparator(9,"ASC"));
                            sortOrder = "9 ASC";
                            jTable1.getColumnModel().getColumn(col).setHeaderValue("▲ REASON FOR PENDING");
                        }
                        break;
                    case 10: 
                        if(sortOrder.equalsIgnoreCase("10 ASC")) {
                            Collections.sort(data, new ArrayList2DComparator(10,"DESC"));
                            sortOrder = "10 DESC";
                            jTable1.getColumnModel().getColumn(col).setHeaderValue("▼ MODIFIED");
                        }
                        else {
                            Collections.sort(data, new ArrayList2DComparator(10,"ASC"));
                            sortOrder = "10 ASC";
                            jTable1.getColumnModel().getColumn(col).setHeaderValue("▲ MODIFIED");
                        }
                        break;
                }
                jTable1.getTableHeader().resizeAndRepaint();
                loadTableContents();
              }
            };
        });
        
        // set preferred column widths
        TableColumn a;
        a = jTable1.getColumnModel().getColumn(0);
        a.setPreferredWidth(100);
        a.setCellRenderer(new CustomTableCellRenderer());
        a = jTable1.getColumnModel().getColumn(1);
        a.setPreferredWidth(170);
        a.setCellRenderer(new CustomTableCellRenderer());
        a = jTable1.getColumnModel().getColumn(2);
        a.setPreferredWidth(100);
        a.setCellRenderer(new CustomTableCellRenderer());
        a = jTable1.getColumnModel().getColumn(3);
        a.setPreferredWidth(80);
        a.setCellRenderer(new CustomTableCellRenderer());
        a = jTable1.getColumnModel().getColumn(4);
        a.setPreferredWidth(180);
        a.setCellRenderer(new CustomTableCellRenderer());
        a = jTable1.getColumnModel().getColumn(5);
        a.setPreferredWidth(120);
        a.setCellRenderer(new CustomTableCellRenderer());
        a = jTable1.getColumnModel().getColumn(6);
        a.setPreferredWidth(80);
        a.setCellRenderer(new CustomTableCellRenderer());
        a = jTable1.getColumnModel().getColumn(7);
        a.setPreferredWidth(180);
        a.setCellRenderer(new CustomTableCellRenderer());
        a = jTable1.getColumnModel().getColumn(8);
        a.setPreferredWidth(60);
        a.setCellRenderer(new CustomTableCellRenderer());
        a = jTable1.getColumnModel().getColumn(9);
        a.setPreferredWidth(130);
        a.setCellRenderer(new CustomTableCellRenderer());
        a = jTable1.getColumnModel().getColumn(10);
        a.setPreferredWidth(100);
        a.setCellRenderer(new CustomTableCellRenderer());
        
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        
        java.net.URL url = ClassLoader.getSystemResource("kboxstatusreport/images/kbox.png");
        Toolkit kit = Toolkit.getDefaultToolkit();
        Image img = kit.createImage(url);
        this.setIconImage(img);
    }
    
    private void initTicketsFile() {
        try {
            Properties prop = new Properties();
            try (InputStream in = new FileInputStream("config.properties")) {
                prop.load(in);
            }
            ticketFilePath = prop.getProperty("path");
            jTextField1.setText(ticketFilePath);
        }
        catch(Exception e) {
            System.out.println(e);
        }
    }
    
    private void addRows(String row1, String row2, String row3, String row4, String row5, String row6, String row7, String row8, String row9, String row10, String row11) {
        model = (DefaultTableModel) jTable1.getModel();
        if(!row9.equalsIgnoreCase("Pending")) {
            row10 = "";
        }
        // Add the rows of the table
        model.addRow(new Object[]{row1, row2, row3, row4, row5, row6, row7, row8, row9, row10, row11});  
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        refresh();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void refresh() {
        String url = "jdbc:mysql://"+hostname+":"+port+"/";
        String db = ""; // Removed for GitHub
        String driver = "com.mysql.jdbc.Driver";
        String user = ""; // Removed for GitHub
        String pass = ""; // Removed for GitHub
        selectedTicketNumber = "";
        try {
	    try (BufferedReader br = new BufferedReader(new FileReader(jTextField1.getText()))) {
	        StringBuilder sb = new StringBuilder();
	        String line = br.readLine();
	
	        while (line != null) {
	        		if(sb.length()!=0) {
	        			sb.append(",");
	        		}
	                        sb.append("'").append(line).append("'");
	            line = br.readLine();
	        }
	        String condition = sb.toString();
                
                if( !condition.equalsIgnoreCase("")) {
                    Class.forName(driver);
                    Connection conn;
                    conn = DriverManager.getConnection(url + db, user, pass);
                    for( SQLWarning warn = conn.getWarnings(); warn != null; warn = warn.getNextWarning() ) {
                            System.out.println( "SQL Warning:" ) ;
                            System.out.println( "State  : " + warn.getSQLState()  ) ;
                            System.out.println( "Message: " + warn.getMessage()   ) ;
                            System.out.println( "Error  : " + warn.getErrorCode() ) ;
                    }
                    try (Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery( "SELECT c.FULL_NAME, a.CUSTOM_FIELD_VALUE6, a.CREATED, a.DUE_DATE, d.NAME, a.CUSTOM_FIELD_VALUE9, a.ID, a.TITLE, b.NAME, a.CUSTOM_FIELD_VALUE13, a.MODIFIED" +
                                                                                                                                                                                        " FROM HD_TICKET a" +
                                                                                                                                                                                        " INNER JOIN HD_STATUS b ON a.HD_STATUS_ID = b.ID" +
                                                                                                                                                                                        " INNER JOIN USER c ON a.OWNER_ID = c.ID" +
                                                                                                                                                                                        " INNER JOIN HD_CATEGORY d ON a.HD_CATEGORY_ID = d.ID" +
                                                                                                                                                                                        " WHERE a.ID IN ("+condition+")" +
                                                                                                                                                                                        " ORDER BY a.ID ASC")) {
                        
                        data.clear();
                        int recordCount = 0;
                        // Loop through the result set
                        while( rs.next() ) {
                            data.add(new ArrayList<String>());
                            data.get(recordCount).add(rs.getString(1));
                            data.get(recordCount).add(rs.getString(2));
                            data.get(recordCount).add(rs.getString(3));
                            data.get(recordCount).add(rs.getString(4));
                            data.get(recordCount).add(rs.getString(5));
                            data.get(recordCount).add(rs.getString(6));
                            data.get(recordCount).add(rs.getString(7));
                            data.get(recordCount).add(rs.getString(8));
                            data.get(recordCount).add(rs.getString(9));
                            data.get(recordCount).add(rs.getString(10));
                            data.get(recordCount).add(rs.getString(11));
                            //addRows(rs.getString(1),rs.getString(2),rs.getString(3),rs.getString(4),rs.getString(5),rs.getString(6),rs.getString(7),rs.getString(8),rs.getString(9),rs.getString(10));
                            recordCount++;
                        }

                        // Required for MS SQL Server
                        stmt.cancel();
                        stmt.close();
                        rs.close();
                        
                        // Reset the sort order
                        sortOrder = "0 ASC";
                        jTable1.getColumnModel().getColumn(0).setHeaderValue("OWNER");
                        jTable1.getColumnModel().getColumn(1).setHeaderValue("ACTION");
                        jTable1.getColumnModel().getColumn(2).setHeaderValue("CREATED");
                        jTable1.getColumnModel().getColumn(3).setHeaderValue("TARGET DATE");
                        jTable1.getColumnModel().getColumn(4).setHeaderValue("CATEGORY");
                        jTable1.getColumnModel().getColumn(5).setHeaderValue("REQUESTOR");
                        jTable1.getColumnModel().getColumn(6).setHeaderValue("TICKET");
                        jTable1.getColumnModel().getColumn(7).setHeaderValue("DESCRIPTION");
                        jTable1.getColumnModel().getColumn(8).setHeaderValue("STATUS");
                        jTable1.getColumnModel().getColumn(9).setHeaderValue("REASON FOR PENDING");
                        jTable1.getColumnModel().getColumn(10).setHeaderValue("MODIFIED");
                        jTable1.getTableHeader().resizeAndRepaint();
                        
                        // Set table contents
                        loadTableContents();
                        
                        if(recordCount==0) {
                            JOptionPane.showMessageDialog(null, "Your tickets file does not contain any valid tickets or is empty", "Warning", JOptionPane.WARNING_MESSAGE);
                        }
                    }
                    conn.close();
                }
                else {
                    addRows("","","","","","","","","","","");
                    JOptionPane.showMessageDialog(null, "Your tickets file does not contain any valid tickets or is empty", "Warning", JOptionPane.WARNING_MESSAGE);
                }
	    }
            catch(FileNotFoundException fnf) {
                JOptionPane.showMessageDialog(null, fnf, "File not found", JOptionPane.ERROR_MESSAGE);
            }
        }
        catch(IOException | ClassNotFoundException | SQLException e) {
            JOptionPane.showMessageDialog(null, e, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void loadTableContents() {
        jTable1.clearSelection();
        model = (DefaultTableModel) jTable1.getModel();
        // Remove all contents of the table
        model.getDataVector().removeAllElements();
        
        // Add contents to the table
        for(int x=0;x<data.size();x++) {
            addRows(data.get(x).get(0),data.get(x).get(1),data.get(x).get(2),data.get(x).get(3),data.get(x).get(4),data.get(x).get(5),data.get(x).get(6),data.get(x).get(7),data.get(x).get(8),data.get(x).get(9),data.get(x).get(10));
        }
    }
    
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        JOptionPane.showMessageDialog(null, "KBOX Status Report v1.0\nby Glenn Dimaliwat\nCopyright 2014", "About", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            Runtime.getRuntime().exec("notepad.exe " + jTextField1.getText());
        }
        catch(FileNotFoundException fnf) {
            JOptionPane.showMessageDialog(null, fnf, "File not found", JOptionPane.ERROR_MESSAGE);
        }
        catch(IOException e) {
            JOptionPane.showMessageDialog(null, e, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        JOptionPane.showMessageDialog(null, "1. Click Edit File\n2. Notepad will open the file path indicated in the text box\n3. If the file does not exist, you will be prompted to create a new file, click Yes\n4. Type your ticket numbers separated by a new line (enter)\n5. Go to File and click Save. Close the notepad\n6. Click Refresh", "How to use this App", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        toggleCellMode();
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void toggleCellMode() {
        if(jToggleButton1.isSelected()) {
            jTable1.setCellSelectionEnabled(true);
        }
        else {
            jTable1.setCellSelectionEnabled(false);
            jTable1.setRowSelectionAllowed(true);
        }
    }
    
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        selectedTicketNumber = (String) jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 0);
        selectedTicketNumberModifiedDate = (String) jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 3);
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        
        if(!selectedTicketNumber.equalsIgnoreCase("")) {
            try {
                URI uri = new URI("http://"+hostname+"/userui/ticket?ID="+selectedTicketNumber);
                Desktop dt = Desktop.getDesktop();
                dt.browse(uri);
                
            } catch ( URISyntaxException | IOException e ) {
                JOptionPane.showMessageDialog(null, "Unable to connect to URL.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        else {
            JOptionPane.showMessageDialog(null, "Please select a ticket number from the list.", "Information", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        String lastSearchKey = searchKey;
        try {
            searchKey = "";
            searchKey = JOptionPane.showInputDialog("Find What", lastSearchKey);
            searchKey = searchKey.toLowerCase();
            
            if(!searchKey.equalsIgnoreCase("") && model!=null) {
                for(int x=0;x<=model.getRowCount()-1;x++) {
                    if(model.getValueAt(x, 0).toString().toLowerCase().contains(searchKey)) {
                        jTable1.setRowSelectionInterval(x, x);
                        jTable1.setColumnSelectionInterval(0, 0);
                        selectedTicketNumber = (String) jTable1.getModel().getValueAt(x, 0);
                        break;
                    }
                    else if(model.getValueAt(x, 1).toString().toLowerCase().contains(searchKey)) {
                        jTable1.setRowSelectionInterval(x, x);
                        jTable1.setColumnSelectionInterval(1, 1);
                        selectedTicketNumber = (String) jTable1.getModel().getValueAt(x, 1);
                        break;
                    }
                    else if(model.getValueAt(x, 2).toString().toLowerCase().contains(searchKey)) {
                        jTable1.setRowSelectionInterval(x, x);
                        jTable1.setColumnSelectionInterval(2, 2);
                        selectedTicketNumber = (String) jTable1.getModel().getValueAt(x, 2);
                        break;
                    }
                    else if(model.getValueAt(x, 3).toString().toLowerCase().contains(searchKey)) {
                        jTable1.setRowSelectionInterval(x, x);
                        jTable1.setColumnSelectionInterval(3, 3);
                        selectedTicketNumber = (String) jTable1.getModel().getValueAt(x, 3);
                        break;
                    }
                    else if(model.getValueAt(x, 4).toString().toLowerCase().contains(searchKey)) {
                        jTable1.setRowSelectionInterval(x, x);
                        jTable1.setColumnSelectionInterval(4, 4);
                        selectedTicketNumber = (String) jTable1.getModel().getValueAt(x, 4);
                        break;
                    }
                    else if(model.getValueAt(x, 5).toString().toLowerCase().contains(searchKey)) {
                        jTable1.setRowSelectionInterval(x, x);
                        jTable1.setColumnSelectionInterval(5, 5);
                        selectedTicketNumber = (String) jTable1.getModel().getValueAt(x, 5);
                        break;
                    }
                    else if(model.getValueAt(x, 6).toString().toLowerCase().contains(searchKey)) {
                        jTable1.setRowSelectionInterval(x, x);
                        jTable1.setColumnSelectionInterval(6, 6);
                        selectedTicketNumber = (String) jTable1.getModel().getValueAt(x, 6);
                        break;
                    }
                    else if(model.getValueAt(x, 7).toString().toLowerCase().contains(searchKey)) {
                        jTable1.setRowSelectionInterval(x, x);
                        jTable1.setColumnSelectionInterval(7, 7);
                        selectedTicketNumber = (String) jTable1.getModel().getValueAt(x, 7);
                        break;
                    }
                    else if(model.getValueAt(x, 8).toString().toLowerCase().contains(searchKey)) {
                        jTable1.setRowSelectionInterval(x, x);
                        jTable1.setColumnSelectionInterval(8, 8);
                        selectedTicketNumber = (String) jTable1.getModel().getValueAt(x, 8);
                        break;
                    }
                    else if(model.getValueAt(x, 9).toString().toLowerCase().contains(searchKey)) {
                        jTable1.setRowSelectionInterval(x, x);
                        jTable1.setColumnSelectionInterval(9, 9);
                        selectedTicketNumber = (String) jTable1.getModel().getValueAt(x, 9);
                        break;
                    }
                    else if(model.getValueAt(x, 10).toString().toLowerCase().contains(searchKey)) {
                        jTable1.setRowSelectionInterval(x, x);
                        jTable1.setColumnSelectionInterval(10, 10);
                        selectedTicketNumber = (String) jTable1.getModel().getValueAt(x, 9);
                        break;
                    }
                    
                    if(x==model.getRowCount()-1) {
                        JOptionPane.showMessageDialog(null, "Search string not found.", "Information", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
                jTable1.requestFocus();
            }
        }
        catch(NullPointerException e) {
            searchKey = lastSearchKey;
        }
        catch(Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed
    
    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        int searchRow = 0;
        int lastRowSearched = 0;
        try {            
            if(repeatSearch) {
                searchRow = 0;
            }
            else {
                searchRow = jTable1.getSelectedRow();
                if(searchRow==model.getRowCount()-1) {
                    searchRow = 0;
                }
                else {
                    searchRow = searchRow + 1;
                }
            }
            
            if(!searchKey.equalsIgnoreCase("") && model!=null) {
                for(int x=searchRow;x<=model.getRowCount()-1;x++) {
                    if(model.getValueAt(x, 0).toString().toLowerCase().contains(searchKey)) {
                        jTable1.setRowSelectionInterval(x, x);
                        jTable1.setColumnSelectionInterval(0, 0);
                        selectedTicketNumber = (String) jTable1.getModel().getValueAt(x, 0);
                        lastRowSearched = x;
                        break;
                    }
                    else if(model.getValueAt(x, 1).toString().toLowerCase().contains(searchKey)) {
                        jTable1.setRowSelectionInterval(x, x);
                        jTable1.setColumnSelectionInterval(1, 1);
                        selectedTicketNumber = (String) jTable1.getModel().getValueAt(x, 1);
                        lastRowSearched = x;
                        break;
                    }
                    else if(model.getValueAt(x, 2).toString().toLowerCase().contains(searchKey)) {
                        jTable1.setRowSelectionInterval(x, x);
                        jTable1.setColumnSelectionInterval(2, 2);
                        selectedTicketNumber = (String) jTable1.getModel().getValueAt(x, 2);
                        lastRowSearched = x;
                        break;
                    }
                    else if(model.getValueAt(x, 3).toString().toLowerCase().contains(searchKey)) {
                        jTable1.setRowSelectionInterval(x, x);
                        jTable1.setColumnSelectionInterval(3, 3);
                        selectedTicketNumber = (String) jTable1.getModel().getValueAt(x, 3);
                        lastRowSearched = x;
                        break;
                    }
                    else if(model.getValueAt(x, 4).toString().toLowerCase().contains(searchKey)) {
                        jTable1.setRowSelectionInterval(x, x);
                        jTable1.setColumnSelectionInterval(4, 4);
                        selectedTicketNumber = (String) jTable1.getModel().getValueAt(x, 4);
                        lastRowSearched = x;
                        break;
                    }
                    else if(model.getValueAt(x, 5).toString().toLowerCase().contains(searchKey)) {
                        jTable1.setRowSelectionInterval(x, x);
                        jTable1.setColumnSelectionInterval(5, 5);
                        selectedTicketNumber = (String) jTable1.getModel().getValueAt(x, 5);
                        lastRowSearched = x;
                        break;
                    }
                    else if(model.getValueAt(x, 6).toString().toLowerCase().contains(searchKey)) {
                        jTable1.setRowSelectionInterval(x, x);
                        jTable1.setColumnSelectionInterval(6, 6);
                        selectedTicketNumber = (String) jTable1.getModel().getValueAt(x, 6);
                        lastRowSearched = x;
                        break;
                    }
                    else if(model.getValueAt(x, 7).toString().toLowerCase().contains(searchKey)) {
                        jTable1.setRowSelectionInterval(x, x);
                        jTable1.setColumnSelectionInterval(7, 7);
                        selectedTicketNumber = (String) jTable1.getModel().getValueAt(x, 7);
                        lastRowSearched = x;
                        break;
                    }
                    else if(model.getValueAt(x, 8).toString().toLowerCase().contains(searchKey)) {
                        jTable1.setRowSelectionInterval(x, x);
                        jTable1.setColumnSelectionInterval(8, 8);
                        selectedTicketNumber = (String) jTable1.getModel().getValueAt(x, 8);
                        lastRowSearched = x;
                        break;
                    }
                    else if(model.getValueAt(x, 9).toString().toLowerCase().contains(searchKey)) {
                        jTable1.setRowSelectionInterval(x, x);
                        jTable1.setColumnSelectionInterval(9, 9);
                        selectedTicketNumber = (String) jTable1.getModel().getValueAt(x, 9);
                        break;
                    }
                    else if(model.getValueAt(x, 10).toString().toLowerCase().contains(searchKey)) {
                        jTable1.setRowSelectionInterval(x, x);
                        jTable1.setColumnSelectionInterval(10, 10);
                        selectedTicketNumber = (String) jTable1.getModel().getValueAt(x, 9);
                        break;
                    }
                }
                
                for(int x=lastRowSearched;x<=model.getRowCount()-1;x++) {
                    for(int y=0;y<=model.getColumnCount()-1;y++) {
                        if(model.getValueAt(x, y).toString().toLowerCase().contains(searchKey)) {
                            if(lastRowSearched==x) {
                                repeatSearch = true;
                            }
                            else {
                                repeatSearch = false;
                            }
                            break;
                        }
                    }
                }
                
                jTable1.requestFocus();
            }
        }
        catch(Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        refresh();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        jToggleButton1.doClick();
        toggleCellMode();
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        Properties prop = new Properties();
        try {
            if(!jTextField1.getText().equalsIgnoreCase("")) {
                prop.setProperty("path",jTextField1.getText());
                prop.store(new FileOutputStream("config.properties"),null);
                ticketFilePath = jTextField1.getText();
                JOptionPane.showMessageDialog(null, "The ticket file path has been updated", "Information", JOptionPane.INFORMATION_MESSAGE);
            }
            else {
                JOptionPane.showMessageDialog(null, "Please provide a ticket file path", "Warning", JOptionPane.WARNING_MESSAGE);
                jTextField1.setText(ticketFilePath);
            }
        }
        catch (IOException | HeadlessException e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if(!selectedTicketNumber.equalsIgnoreCase("")) {
            try {
                String strMonth = sdfMonth.format(sdf.parse(selectedTicketNumberModifiedDate.substring(0, 10)));
                String strYear = sdfYear.format(sdf.parse(selectedTicketNumberModifiedDate.substring(0, 10)));
                String strMM   = sdfMM.format(sdf.parse(selectedTicketNumberModifiedDate.substring(0, 10)));

                URI uri = new URI("http://itsi.mayniladwater.com.ph/appmgnt/Internal%20Documents/Forms/AllItems.aspx?RootFolder=%2Fappmgnt%2FInternal%20Documents%2F"+strYear+"%2F"+strMM+"%20"+strMonth+"%2FTN"+selectedTicketNumber);
                Desktop dt = Desktop.getDesktop();
                dt.browse(uri);
                
            } catch ( ParseException | URISyntaxException | IOException e ) {
                JOptionPane.showMessageDialog(null, "Unable to connect to URL.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        else {
            JOptionPane.showMessageDialog(null, "Please select a ticket number from the list.", "Information", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        int keyCode = evt.getKeyCode();
        if(keyCode == KeyEvent.VK_UP||keyCode == KeyEvent.VK_DOWN||keyCode == KeyEvent.VK_LEFT||keyCode == KeyEvent.VK_RIGHT) {
            selectedTicketNumber = (String) jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 0);
            selectedTicketNumberModifiedDate = (String) jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 3);
        }
    }//GEN-LAST:event_jTable1KeyReleased
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the look and feel */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e) {
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new KBOXJFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables

    private static class ArrayList2DComparator implements Comparator {
        private int column = 0;
        private String sortOrder = "ASC";
        
        ArrayList2DComparator(int column, String sortOrder) {
            this.column = column;
            this.sortOrder = sortOrder;
        }
        @Override
        public int compare(Object obj1, Object obj2) {  
            if (! (obj1 instanceof ArrayList) || ! (obj2 instanceof ArrayList)) {  
                throw new ClassCastException(  
                            "compared objects must be instances of ArrayList");  
            }  
            String str1 = (String) ((ArrayList) obj1).get(column);
            String str2 = (String) ((ArrayList) obj2).get(column);
            if(sortOrder.equalsIgnoreCase("ASC")) {
                return str1.compareTo(str2);
            }
            else {
                return str2.compareTo(str1);
            }
        }
    }  
}

