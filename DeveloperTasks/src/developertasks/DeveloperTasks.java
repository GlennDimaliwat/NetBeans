/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package developertasks;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author Glenn Dimaliwat
 */
public class DeveloperTasks extends javax.swing.JFrame {

    private static DefaultTableModel tableModel;
    private DefaultTableModel model;
    
    /**
     * Creates new form DeveloperTasks
     */
    public DeveloperTasks() {
        initComponents();
        initCustomComponents();
    }
    
    private void initCustomComponents() {
        tableModel = new DefaultTableModel(new Object[] { "TICKET ID", "TIMESTAMP", "ASSIGNED BY", "FROM", "TO", "ASSIGNED TO", "TITLE" }, 0);
        jTable1.setModel(tableModel);  
        jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        // set preferred column widths
        TableColumn a;
        a = jTable1.getColumnModel().getColumn(0);
        a.setPreferredWidth(60);
        //a.setCellRenderer(new CustomTableCellRenderer());
        a = jTable1.getColumnModel().getColumn(1);
        a.setPreferredWidth(150);
        //a.setCellRenderer(new CustomTableCellRenderer());
        a = jTable1.getColumnModel().getColumn(2);
        a.setPreferredWidth(110);
        //a.setCellRenderer(new CustomTableCellRenderer());
        a = jTable1.getColumnModel().getColumn(3);
        a.setPreferredWidth(100);
        //a.setCellRenderer(new CustomTableCellRenderer());
        a = jTable1.getColumnModel().getColumn(4);
        a.setPreferredWidth(100);
        //a.setCellRenderer(new CustomTableCellRenderer());
        a = jTable1.getColumnModel().getColumn(5);
        a.setPreferredWidth(110);
        //a.setCellRenderer(new CustomTableCellRenderer());
        a = jTable1.getColumnModel().getColumn(6);
        a.setPreferredWidth(200);
        
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
    }
    
    private void addRows(String ticketID, String timestamp, String assignedBy, String beforeValue, String afterValue, String assignedTo, String title) {
        model = (DefaultTableModel) jTable1.getModel();
        // Add the rows of the table
        model.addRow(new Object[]{ticketID, timestamp, assignedBy, beforeValue, afterValue, assignedTo, title});  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setMnemonic('e');
        jButton1.setText("Refresh");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 851, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String url = "jdbc:mysql://"; // Removed for GitHub
        String db = ""; // Removed for GitHub
        String driver = "com.mysql.jdbc.Driver";
        String user = ""; // Removed for GitHub
        String pass = ""; // Removed for GitHub
        SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy  hh:mm aaa");
        try {
            Class.forName(driver);
            Connection conn;
            conn = DriverManager.getConnection(url + db, user, pass);
            for( SQLWarning warn = conn.getWarnings(); warn != null; warn = warn.getNextWarning() ) {
                    System.out.println( "SQL Warning:" ) ;
                    System.out.println( "State  : " + warn.getSQLState()  ) ;
                    System.out.println( "Message: " + warn.getMessage()   ) ;
                    System.out.println( "Error  : " + warn.getErrorCode() ) ;
            }
            try (Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery( "SELECT b.HD_TICKET_ID, b.TIMESTAMP, c.FULL_NAME, a.BEFORE_VALUE, a.AFTER_VALUE, e.FULL_NAME, d.TITLE" +
                                                                                            " FROM HD_TICKET_CHANGE_FIELD a" +
                                                                                            " LEFT JOIN HD_TICKET_CHANGE b ON a.HD_TICKET_CHANGE_ID = b.ID" +
                                                                                            " LEFT JOIN USER c ON b.USER_ID = c.ID" +
                                                                                            " LEFT JOIN HD_TICKET d ON b.HD_TICKET_ID = d.ID" +
                                                                                            " LEFT JOIN USER e ON e.ID = d.OWNER_ID" +
                                                                                            " WHERE a.FIELD_CHANGED = 'CUSTOM_FIELD_VALUE0'" +
                                                                                            " AND a.AFTER_VALUE = 'Developer'" +
                                                                                            " ORDER BY a.ID DESC" )) {
                int recordCount = 0;
                // Loop through the result set
                while( rs.next() ) {
                    Date date = rs.getTimestamp(2);
                    addRows(rs.getString(1),sdf.format(date),rs.getString(3),rs.getString(4),rs.getString(5),rs.getString(6),rs.getString(7));
                    recordCount++;
                }

                // Required for MS SQL Server
                stmt.cancel();
                stmt.close();
                rs.close();
                if(recordCount==0) {
                    JOptionPane.showMessageDialog(null, "Your tickets file does not contain any valid tickets or is empty", "Warning", JOptionPane.WARNING_MESSAGE);
                }
            }
            conn.close();
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e) {
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DeveloperTasks().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
